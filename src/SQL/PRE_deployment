/*
-- NOTES --

 D0 NOT RUN THIS WITHOUT FIRST COMMENTING OUT WHAT ISN'T NEEDED
 TO COMMENT OUT MULTIPLE ROWS USE THE / * TEXT * / METHOD (without the spaces)

IF YOU DROP THE TABLES YOU WILL NEED TO RE-HOOK THEM UP IN THE APP.

*/


-- Quick templates for table management:

-- CREATE TABLE
/*
CREATE TABLE testtable(
    testprimary VARCHAR(50) PRIMARY KEY,
    testcolumn VARCHAR(100)
);
*/
-- UPDATE TABLE
/*
ALTER TABLE testtable
ADD COLUMN testcolumn1 VARCHAR(70)
*/

-- DELETE TABLE
/*
DROP TABLE IF EXISTS testtable;
*/

-- PERMISSIONS
/*
GRANT SELECT ON testtable TO public;
GRANT INSERT ON testtable TO public;
GRANT UPDATE ON testtable TO public;
*/

DROP TABLE IF EXISTS audits;
DROP TABLE IF EXISTS cases;
DROP TABLE IF EXISTS clippings;
DROP TABLE IF EXISTS contacts;
DROP TABLE IF EXISTS courts;
DROP TABLE IF EXISTS errorlogs;
DROP TABLE IF EXISTS groups;
DROP TABLE IF EXISTS grouplists;
DROP TABLE IF EXISTS recordings;
DROP TABLE IF EXISTS rooms;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS videopermissions;

-- audit table for all activity logging
CREATE TABLE audits(
    logentry VARCHAR(50) PRIMARY KEY,
    activity VARCHAR(100),
    recordinguid VARCHAR(50),
    caseuid VARCHAR(50),
    auditdetails VARCHAR(300),
    email VARCHAR(70)
);

CREATE TABLE cases(
    caseuid VARCHAR(50) PRIMARY KEY,
    caseref VARCHAR(15),
    court VARCHAR(50),
    recordingstatus VARCHAR(70)
);

-- clipping table to support editing feature
CREATE TABLE clippings(
    clipping VARCHAR(50) PRIMARY KEY,
    recordinguid VARCHAR(50),
    email VARCHAR(70),
    clipstart VARCHAR(10),
    clipend VARCHAR(10)
);

-- contact table is for witnesses and defendants
CREATE TABLE contacts(
    contactid VARCHAR(50) PRIMARY KEY,
    fullname VARCHAR(100),
    active VARCHAR(20),
    accounttype VARCHAR(30),
    caseuid VARCHAR(50),
    court VARCHAR(50) -- what value does this hold?
);

CREATE TABLE courts(
    court VARCHAR(50) PRIMARY KEY
);

-- error logging for any functional errors produced while in use
CREATE TABLE errorlogs(
    errorlog VARCHAR(300) PRIMARY KEY,
    recordinguid VARCHAR(50),
    caseuid VARCHAR(50),
    environment VARCHAR(50),
    appversion VARCHAR(50),
    email VARCHAR(70),
    logdetails VARCHAR(500)
);

CREATE TABLE recordings(
    recordinguid VARCHAR(50) PRIMARY KEY,
    caseuid VARCHAR(50),
    caseref VARCHAR(15),
    court VARCHAR(50),
    adult VARCHAR(10),
    cvproom VARCHAR(10),
    defendants VARCHAR(300),
    email VARCHAR(70),
    ingestaddress VARCHAR(200),
    parentrecuid VARCHAR(50),
    recordingstartdate VARCHAR(50),
    recordingstatus VARCHAR(100),
    recordingversion VARCHAR(10),
    recordingavailable VARCHAR(10),
    recordingfilename VARCHAR(50),
    recordingsaslink VARCHAR(150),
    witnessnames VARCHAR(300),
    liveoutputurl VARCHAR(200)
);

CREATE TABLE rooms(
    room VARCHAR(50) PRIMARY KEY
);

-- this table will be used for staff & counsel
CREATE TABLE users(
    userid VARCHAR(50) PRIMARY KEY,
    fullname VARCHAR(100),
    active VARCHAR(20),
    prerole VARCHAR(30),
    court VARCHAR(50),
    region VARCHAR(50),
    email VARCHAR(70),
    phone VARCHAR(20),
    organisation VARCHAR(50)
);

CREATE TABLE videopermissions(
    vpuid VARCHAR(70) PRIMARY KEY,
    recordinguid VARCHAR(50),
    caseuid VARCHAR(50),
    caseref VARCHAR(15),
    contact VARCHAR(100),
    court VARCHAR(50),
    defendants VARCHAR(300),
    witnessname VARCHAR(50),
    email VARCHAR(70),
    emailnotificationsent VARCHAR(10),
    portalreqhttpparameters VARCHAR(300),
    recordingsaslink VARCHAR(150),
    recordingversion VARCHAR(10),
    recordingavailable VARCHAR(10),
    recordingstartdate VARCHAR(50),
    activeaccess VARCHAR(70)
);


-- All groups (includes court names, regions etc)
CREATE TABLE grouplist(
    groupid VARCHAR(50) PRIMARY KEY,
    groupname VARCHAR(50),
    groupdescription VARCHAR(300),
    parentgroup VARCHAR(50)
);

-- Group assignments
CREATE TABLE groupassignments(
    groupid VARCHAR(50) PRIMARY KEY,
    userid VARCHAR(50)
);

-- PERMISSIONS

-- Create Role
DROP ROLE IF EXISTS pre_UserRole;
CREATE ROLE pre_UserRole WITH LOGIN;

--AUDITS
GRANT SELECT ON public.audits TO public;
GRANT INSERT ON public.audits TO public;
GRANT UPDATE ON public.audits TO public;

--CASES
GRANT SELECT ON public.cases TO public;
GRANT INSERT ON public.cases TO public;
GRANT UPDATE ON public.cases TO public;

--CLIPPINGS
GRANT SELECT ON public.clippings TO public;
GRANT INSERT ON public.clippings TO public;
GRANT UPDATE ON public.clippings TO public;

--CONTACTS
GRANT SELECT ON public.contacts TO public;
GRANT INSERT ON public.contacts TO public;
GRANT UPDATE ON public.contacts TO public;

--COURTS
GRANT SELECT ON public.courts TO public;
GRANT INSERT ON public.courts TO public;
GRANT UPDATE ON public.courts TO public;

--ERRORLOGS
GRANT SELECT ON public.errorlogs TO public;
GRANT INSERT ON public.errorlogs TO public;
GRANT UPDATE ON public.errorlogs TO public;

--GROUPLISTS
GRANT SELECT ON public.grouplist TO public;
GRANT INSERT ON public.grouplist TO public;
GRANT UPDATE ON public.grouplist TO public;

--GROUPASSIGNMENTS
GRANT SELECT ON public.groupassignments TO public;
GRANT INSERT ON public.groupassignments TO public;
GRANT UPDATE ON public.groupassignments TO public;

--RECORDINGS
GRANT SELECT ON public.recordings TO public;
GRANT INSERT ON public.recordings TO public;
GRANT UPDATE ON public.recordings TO public;

--ROOMS
GRANT SELECT ON public.rooms TO public;
GRANT INSERT ON public.rooms TO public;
GRANT UPDATE ON public.rooms TO public;

--USERS
GRANT SELECT ON public.users TO public;
GRANT INSERT ON public.users TO public;
GRANT UPDATE ON public.users TO public;

--VIDEOPERMISSIONS
GRANT SELECT ON public.videopermissions TO public;
GRANT INSERT ON public.videopermissions TO public;
GRANT UPDATE ON public.videopermissions TO public;
